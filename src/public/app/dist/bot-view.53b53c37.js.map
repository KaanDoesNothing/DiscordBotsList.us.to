{"version":3,"sources":["pages/bot-view.vue"],"names":[],"mappings":";;;;;;;AA0FA;;AACA;;;;;;;;;;eAEA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,GAAA,EAAA,SADA;AAEA,MAAA,QAAA,EAAA,EAFA;AAGA,MAAA,eAAA,EAAA,EAHA;AAIA,MAAA,SAAA,EAAA,EAJA;AAKA,MAAA,KAAA,EAAA,EALA;AAMA,MAAA,MAAA,EAAA,EANA;AAOA,MAAA,SAAA,EAAA;AAPA,KAAA;AASA,GAXA;AAYA,EAAA,OAZA,qBAYA;AACA,SAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA;AAEA,SAAA,QAAA;AACA,SAAA,aAAA;AACA,SAAA,UAAA;AACA,SAAA,UAAA;AACA,GAnBA;AAoBA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AACA,qBAAA,GAAA,oBAAA,KAAA,MAAA,GAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,KAAA,CAAA,GAAA,GAAA,GAAA,CAAA,IAAA,CAAA,GAAA;AACA,OAFA;AAGA,KALA;AAMA,IAAA,aANA,2BAMA;AAAA;;AACA,qBAAA,GAAA,6BAAA,KAAA,MAAA,GAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,QAAA,GAAA,GAAA,CAAA,IAAA,CAAA,QAAA;AACA,OAFA;AAGA,KAVA;AAWA,IAAA,UAXA,wBAWA;AAAA;;AACA,qBAAA,GAAA,0BAAA,KAAA,MAAA,GAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA;AACA,OAFA;AAGA,KAfA;AAgBA,IAAA,UAhBA,wBAgBA;AAAA;;AACA,qBAAA,GAAA,0BAAA,KAAA,MAAA,GAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,SAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA;AACA,OAFA;AAGA,KApBA;AAqBA,IAAA,WArBA,yBAqBA;AAAA;;AACA,qBAAA,IAAA,6BAAA,KAAA,MAAA,GAAA;AAAA,QAAA,OAAA,EAAA,KAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,GAAA,CAAA,IAAA,CAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,aAAA;;AACA,UAAA,MAAA,CAAA,eAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,EAAA;AACA,SAJA,MAIA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA;AACA;AACA,OARA;AASA,KA/BA;AAgCA,IAAA,IAhCA,kBAgCA;AAAA;;AACA,qBAAA,IAAA,0BAAA,KAAA,MAAA,GAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA;;AACA,QAAA,MAAA,CAAA,UAAA;AACA,OAHA;AAIA;AArCA,GApBA;AA2DA,EAAA,QAAA;AACA,IAAA,cADA,4BACA;AACA;AACA,aAAA,KAAA,OAAA,IAAA,KAAA,GAAA,GAAA,KAAA,OAAA,CAAA,GAAA,KAAA,KAAA,GAAA,CAAA,QAAA,GAAA,KAAA;AACA;AAJA,KAKA,oBAAA,CAAA,SAAA,EAAA,YAAA,CAAA,CALA;AA3DA","file":"bot-view.53b53c37.js","sourceRoot":"..","sourcesContent":["<template lang=\"pug\">\r\n    div(class=\"container\" id=\"mainBotView\")\r\n            div(class=\"card is-shadow\" v-if=\"bot\")\r\n                div(class=\"card-image has-text-centered\")\r\n                    img(class=\"is-rounded\" id=\"avatar\" alt=\"Bot Avatar\" :src=\"bot.user.avatarURL\" width=\"256\" height=\"256\")\r\n\r\n                div(class=\"card-content has-text-centered\")\r\n                    label(class=\"title\") {{bot.user.username}}\r\n                        | ({{likeCount}} likes)  \r\n                        template(v-if=\"isLoggedIn\")\r\n                            a(@click=\"like\")\r\n                                font-awesome-icon(icon=\"thumbs-up\")\r\n\r\n                    br\r\n                    \r\n                    div(class=\"control\")\r\n                        br\r\n                        span(class=\"tag\") Owner\r\n                        a(class=\"tag is-info\") {{bot.owner.tag}}\r\n\r\n                    div(class=\"control\")\r\n                        br\r\n                        span(class=\"tag\") Verified\r\n                        a(class=\"tag is-success\" v-if=\"bot.verified\") Yes\r\n                        a(class=\"tag is-danger\" v-if=\"!bot.verified\") No\r\n\r\n                    div(class=\"control\")\r\n                        br\r\n                        span(class=\"tag\") Prefix\r\n                        a(class=\"tag is-info\") {{bot.prefix}}\r\n\r\n                    div(v-if=\"stats\")\r\n                        div(class=\"control\" v-if=\"stats.guilds\")\r\n                            br\r\n                            span(class=\"tag\") Guilds\r\n                            a(class=\"tag is-info\") {{stats.guilds}}\r\n                        div(class=\"control\" v-if=\"stats.channels\")\r\n                            br\r\n                            span(class=\"tag\") Channels\r\n                            a(class=\"tag is-info\") {{stats.channels}}\r\n                        div(class=\"control\" v-if=\"stats.users\")\r\n                            br\r\n                            span(class=\"tag\") users\r\n                            a(class=\"tag is-info\") {{stats.users}}\r\n\r\n                    div(class=\"control\")\r\n                        br\r\n                        div(class=\"buttons is-centered\")\r\n                            a(class=\"button is-dark\" :href=\"bot.invite_link\") Invite\r\n                            a(class=\"button is-dark\" :href=\"bot.website_link\") Website\r\n                            //- a(class=\"button is-dark\" v-if=\"hasPermissions\" :href=\"`/bot/${bot.bot_id}/edit`\") Api Key\r\n                            router-link(class=\"button is-dark\" v-if=\"hasPermissions\" :to=\"`/bot/${bot.bot_id}/edit`\") Edit\r\n                    br\r\n                    \r\n                    div(class=\"message has-text-centered\")\r\n                        div(class=\"message-header text-center\") Description\r\n                        div(class=\"message-body\") {{bot.description}}\r\n            \r\n            br\r\n\r\n            div(class=\"container\")\r\n                div(class=\"card is-shadow\")\r\n                    div(class=\"card-header\")\r\n                        label(class=\"card-header-title\") Comments\r\n                    div(class=\"card-content\")\r\n\r\n                        div(class=\"field\")\r\n                            div(class=\"notification is-danger\" v-if=\"lastError\") {{lastError}}\r\n                        \r\n                        div(class=\"field has-addons\" v-if=\"isLoggedIn\")\r\n                            div(class=\"control is-expanded\")\r\n                                input(class=\"input\" type=\"text\" placeholder=\"Message content here.\" v-model=\"comment_content\")\r\n                            div(class=\"control\")\r\n                                a(class=\"button is-info\" @click=\"postComment\") Comment\r\n\r\n                        div(class=\"media\" v-for=\"comment in comments\")\r\n                            div(class=\"media-left\")\r\n                                label(class=\"image is-64x64\")\r\n                                    img(class=\"is-rounded\" :src=\"comment.author.displayAvatarURL\")\r\n                            div(class=\"media-content\")\r\n                                div(class=\"content\")\r\n                                    router-link(:to=\"`/profile/${comment.author_id}`\")\r\n                                        strong {{comment.author.username}} \r\n                                    label {{comment.readableCommentDate}}\r\n                                    br\r\n                                    label {{comment.content}}\r\n                                    br\r\n</template>\r\n\r\n<script>\r\n    import {mapState} from \"vuex\";\r\n    import Axios from \"axios\";\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                bot: undefined,\r\n                comments: [],\r\n                comment_content: \"\",\r\n                lastError: \"\",\r\n                stats: {},\r\n                bot_id: \"\",\r\n                likeCount: 0\r\n            }\r\n        },\r\n        mounted() {\r\n            this.bot_id = this.$route.params.id;\r\n\r\n            this.fetchBot();\r\n            this.fetchComments();\r\n            this.fetchStats();\r\n            this.fetchLikes();\r\n        },\r\n        methods: {\r\n            fetchBot() {\r\n                Axios.get(`/api/bot/${this.bot_id}`).then(res => {\r\n                    this.bot = res.data.bot;\r\n                });\r\n            },\r\n            fetchComments() {\r\n                Axios.get(`/api/bot/comments/${this.bot_id}`).then(res => {\r\n                    this.comments = res.data.comments;\r\n                });\r\n            },\r\n            fetchStats() {\r\n                Axios.get(`/api/bot/stats/${this.bot_id}`).then(res => {\r\n                    this.stats = res.data.stats;\r\n                });\r\n            },\r\n            fetchLikes() {\r\n                Axios.get(`/api/bot/likes/${this.bot_id}`).then(res => {\r\n                    this.likeCount = res.data.likes.length;\r\n                });\r\n            },\r\n            postComment() {\r\n                Axios.post(`/api/bot/comments/${this.bot_id}`, {content: this.comment_content}).then(res => {\r\n                    if(res.data.msg) {\r\n                        this.fetchComments();\r\n                        this.comment_content = \"\";\r\n                        this.lastError = \"\";\r\n                    }else {\r\n                        this.lastError = res.data.error;\r\n                    }\r\n                });\r\n            },\r\n            like() {\r\n                Axios.post(`/api/bot/likes/${this.bot_id}`).then((res) => {\r\n                    console.log(res.data);\r\n                    this.fetchLikes();\r\n                });\r\n            }\r\n        },\r\n        computed: {\r\n            hasPermissions() {\r\n                // console.log(this.session && this.bot ? this.session._id === this.bot_id : false)\r\n                return this.session && this.bot ? this.session._id === this.bot.owner_id : false;\r\n            },\r\n            ...mapState([\"session\", \"isLoggedIn\"])\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    #mainBotView {\r\n        padding: 5%;\r\n    }\r\n\r\n    #avatar {\r\n        margin: 1%;\r\n    }\r\n\r\n    @media (min-width: 768px) {\r\n        #mainBotView {\r\n            width: 800px;\r\n            margin-top: 1%;\r\n            padding: 0%;\r\n        }\r\n    }\r\n\r\n    .message {\r\n        min-height: 250px;\r\n    }\r\n\r\n    .message-header {\r\n        text-align: center !important;\r\n    }\r\n\r\n    .editInput {\r\n        text-align: center !important;\r\n        width: 40%;\r\n    }\r\n</style>"]}