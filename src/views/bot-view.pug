extends layouts/main

block content
    div(class="container" id="mainBotView")
        div(class="card is-shadow" v-if="bot")
            div(class="card-image has-text-centered")
                img(class="is-rounded" id="avatar" src=bot.user.displayAvatarURL({size: 4096}) alt="Bot Avatar" width="256" height="256")

            div(class="card-content has-text-centered")
                label(class="title") {{bot.user.username}}

                br
                
                div(class="control")
                    br
                    span(class="tag") Owner
                    a(class="tag is-info") {{bot.owner.tag}}

                div(class="control")
                    br
                    span(class="tag") Verified
                    a(class="tag is-success" v-if="bot.verified") Yes
                    a(class="tag is-danger" v-if="!bot.verified") No

                div(class="control")
                    br
                    span(class="tag") Prefix
                    a(class="tag is-info") {{bot.prefix}}

                div(class="control")
                    br
                    div(class="buttons is-centered")
                        a(class="button is-dark" :href="bot.invite_link") Invite
                        a(class="button is-dark" :href="bot.website_link") Website
                        a(class="button is-dark" v-if="hasPermissions" :href="`/bot/${bot.bot_id}/edit`") Edit

                br
                
                div(class="message has-text-centered")
                    div(class="message-header text-center") Description
                    div(class="message-body") {{bot.description}}
        
        br

        div(class="container")
            div(class="card is-shadow")
                div(class="card-header")
                    label(class="card-header-title") Comments
                div(class="card-content")

                    div(class="field")
                        div(class="notification is-danger" v-if="lastError") {{lastError}}
                    
                    div(class="field has-addons" v-if="_isLoggedIn")
                        div(class="control is-expanded")
                            input(class="input" type="text" placeholder="Message content here." v-model="comment_content")
                        div(class="control")
                            a(class="button is-info" @click="postComment") Comment

                    div(class="media" v-for="comment in comments")
                        div(class="media-left")
                            label(class="image is-64x64")
                                img(class="is-rounded" :src="comment.author.displayAvatarURL")
                        div(class="media-content")
                            div(class="content")
                                a(:href="`/profile/${comment.author_id}`")
                                    strong {{comment.author.username}} 
                                label {{comment.readableCommentDate}}
                                br
                                label {{comment.content}}
                                br

    script.
        new Vue({
            el: "#mainBotView",
            data() {
                return {
                    bot: undefined,
                    hasPermissions: #{hasPermissions},
                    comments: [],
                    comment_content: "",
                    lastError: ""
                }
            },
            mounted() {
                this.fetchBot();
            },
            methods: {
                fetchBot() {
                    axios.get("/bot/#{bot.bot_id}/json").then(res => {
                        this.bot = res.data.bot
                        this.comments = res.data.comments;
                    });
                },
                postComment() {
                    axios.post("/bot/#{bot.bot_id}/comment", {content: this.comment_content}).then(res => {
                        if(res.data.msg) {
                            this.fetchBot();
                            this.comment_content = "";
                            this.lastError = "";
                        }else {
                            this.lastError = res.data.error;
                        }
                    });
                }
            }
        });

    link(rel="stylesheet" type="text/css" href="/static/css/bot-view.css")